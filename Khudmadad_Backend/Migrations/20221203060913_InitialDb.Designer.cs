// <auto-generated />
using Khudmadad_Backend.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KhudmadadBackend.Migrations
{
    [DbContext(typeof(Ef_DataContext))]
    [Migration("20221203060913_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Khudmadad_Backend.EfCore.Gig", b =>
                {
                    b.Property<int>("gigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("gigId"));

                    b.Property<int>("creatorId")
                        .HasColumnType("int");

                    b.Property<string>("deadline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gigName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("pay")
                        .HasColumnType("float");

                    b.HasKey("gigId");

                    b.HasIndex("creatorId");

                    b.ToTable("Gig");
                });

            modelBuilder.Entity("Khudmadad_Backend.EfCore.Roles", b =>
                {
                    b.Property<int>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("roleId"));

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Khudmadad_Backend.EfCore.Users", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("userId");

                    b.HasIndex("roleId");

                    b.HasIndex("userName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Khudmadad_Backend.Efcore.Offers", b =>
                {
                    b.Property<int>("gigId")
                        .HasColumnType("int");

                    b.Property<int>("freelancerId")
                        .HasColumnType("int");

                    b.Property<double>("pay")
                        .HasColumnType("float");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("gigId", "freelancerId");

                    b.HasIndex("freelancerId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Khudmadad_Backend.EfCore.Gig", b =>
                {
                    b.HasOne("Khudmadad_Backend.EfCore.Users", "Creator")
                        .WithMany("gig")
                        .HasForeignKey("creatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Khudmadad_Backend.EfCore.Users", b =>
                {
                    b.HasOne("Khudmadad_Backend.EfCore.Roles", "Role")
                        .WithMany("users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Khudmadad_Backend.Efcore.Offers", b =>
                {
                    b.HasOne("Khudmadad_Backend.EfCore.Users", "freelancer")
                        .WithMany("offer")
                        .HasForeignKey("freelancerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Khudmadad_Backend.EfCore.Gig", "gig")
                        .WithMany("offer")
                        .HasForeignKey("gigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("freelancer");

                    b.Navigation("gig");
                });

            modelBuilder.Entity("Khudmadad_Backend.EfCore.Gig", b =>
                {
                    b.Navigation("offer");
                });

            modelBuilder.Entity("Khudmadad_Backend.EfCore.Roles", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("Khudmadad_Backend.EfCore.Users", b =>
                {
                    b.Navigation("gig");

                    b.Navigation("offer");
                });
#pragma warning restore 612, 618
        }
    }
}
